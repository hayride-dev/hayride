use super::CoreBackend;
use wasmtime::component::ResourceTable;

pub struct CoreCtx {
    pub core_backend: CoreBackend,
}

impl CoreCtx {
    // TODO: Allow other implementation of CoreBackend
    pub fn new(core_backend: hayride_core::CoreBackend) -> Self {
        let core_backend: Box<hayride_core::CoreBackend> = Box::new(core_backend);
        Self {
            core_backend: CoreBackend(core_backend),
        }
    }
}

pub trait CoreView: Send {
    /// Returns a mutable reference to the core context.
    fn ctx(&mut self) -> &mut CoreCtx;

    /// Returns a mutable reference to the core resource table.
    fn table(&mut self) -> &mut ResourceTable;
}

impl<T: ?Sized + CoreView> CoreView for &mut T {
    fn ctx(&mut self) -> &mut CoreCtx {
        T::ctx(self)
    }

    fn table(&mut self) -> &mut ResourceTable {
        T::table(self)
    }
}

impl<T: ?Sized + CoreView> CoreView for Box<T> {
    fn ctx(&mut self) -> &mut CoreCtx {
        T::ctx(self)
    }

    fn table(&mut self) -> &mut ResourceTable {
        T::table(self)
    }
}

/// A concrete structure that all generated `Host` traits are implemented for.
///
/// This type serves as a small newtype wrapper to implement all of the `Host`
/// traits for `hayride:core`. This type is internally used and is only needed if
/// you're interacting with `add_to_linker` functions generated by bindings
/// themselves (or `add_to_linker_get_host`).
///
/// This type is automatically used when using
/// [`add_to_linker_async`](crate::add_to_linker_async)
/// or
/// [`add_to_linker_sync`](crate::add_to_linker_sync)
/// and doesn't need to be manually configured.
#[repr(transparent)]
pub struct CoreImpl<T>(pub T);

impl<T: CoreView> CoreView for CoreImpl<T> {
    fn ctx(&mut self) -> &mut CoreCtx {
        self.0.ctx()
    }

    fn table(&mut self) -> &mut ResourceTable {
        self.0.table()
    }
}
