use wasmtime::component::ResourceTable;

use super::VersionBackend;
#[derive(Clone, Debug, Default)]
pub struct VersionCache {
    /// epoch seconds
    pub last_check: Option<u64>,
    /// Last version string returned
    pub last_version: Option<String>,
}
use std::sync::{Arc, Mutex};

pub struct CoreCtx {
    pub version_backend: VersionBackend,
    /// Cache for version info
    pub version_cache: Arc<Mutex<VersionCache>>,
}

impl CoreCtx {
    pub fn new() -> Self {
        let version_backend: Box<hayride_core::VersionBackend> =
            Box::new(hayride_core::VersionBackend::default());
        Self {
            version_backend: VersionBackend(version_backend),
            version_cache: Arc::new(Mutex::new(VersionCache::default())),
        }
    }

    /// Get a clone of the version cache struct
    pub fn get_version_cache(&self) -> VersionCache {
        self.version_cache.lock().unwrap().clone()
    }

    /// Set the version cache values
    pub fn set_version_cache(&self, last_check: Option<u64>, last_version: Option<String>) {
        let mut cache = self.version_cache.lock().unwrap();
        cache.last_check = last_check;
        cache.last_version = last_version;
    }
}

impl Clone for CoreCtx {
    fn clone(&self) -> Self {
        let version_backend: Box<hayride_core::VersionBackend> =
            Box::new(hayride_core::VersionBackend::default());
        Self {
            version_backend: VersionBackend(version_backend),
            version_cache: Arc::clone(&self.version_cache),
        }
    }
}

pub trait CoreView: Send {
    /// Returns a mutable reference to the core context.
    fn ctx(&mut self) -> &mut CoreCtx;

    /// Returns a mutable reference to the core resource table.
    fn table(&mut self) -> &mut ResourceTable;
}

impl<T: ?Sized + CoreView> CoreView for &mut T {
    fn ctx(&mut self) -> &mut CoreCtx {
        T::ctx(self)
    }

    fn table(&mut self) -> &mut ResourceTable {
        T::table(self)
    }
}

impl<T: ?Sized + CoreView> CoreView for Box<T> {
    fn ctx(&mut self) -> &mut CoreCtx {
        T::ctx(self)
    }

    fn table(&mut self) -> &mut ResourceTable {
        T::table(self)
    }
}

/// A concrete structure that all generated `Host` traits are implemented for.
///
/// This type serves as a small newtype wrapper to implement all of the `Host`
/// traits for `hayride:wac`. This type is internally used and is only needed if
/// you're interacting with `add_to_linker` functions generated by bindings
/// themselves (or `add_to_linker_get_host`).
///
/// This type is automatically used when using
/// [`add_to_linker_async`](crate::add_to_linker_async)
/// or
/// [`add_to_linker_sync`](crate::add_to_linker_sync)
/// and doesn't need to be manually configured.
#[repr(transparent)]
pub struct CoreImpl<T>(pub T);

impl<T: CoreView> CoreView for CoreImpl<T> {
    fn ctx(&mut self) -> &mut CoreCtx {
        self.0.ctx()
    }

    fn table(&mut self) -> &mut ResourceTable {
        self.0.table()
    }
}
